package org.accolite.DAO;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;

import org.accolite.ACL.database.DatabaseConnection;
import org.accolite.ACL.model.ApplicationObject;
import org.accolite.ACL.model.ApplicationUserObjectPrivilege;
import org.accolite.ACL.model.Privilege;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseBody;

import com.mysql.jdbc.Statement;

public class ApplicationUserObjectPrivilegeDao {

	public String addUserObjPri(Map<String, String> map) {
		String sql = "Insert Into Privilege(Views,Edits) VALUES(?,?)";
		String sql2 = "INSERT INTO ApplicationUserObjectPrivilege(ApplicationObjectId,Userid,PrivilegeId) VALUES(?,?,?)";
		try {
			Connection conn = DatabaseConnection.getConnection();
		
				PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS); // getting auto generated key  for privilege table
				PreparedStatement stmt2 = conn.prepareStatement(sql2);
		 
			stmt.executeUpdate();
			ResultSet rs = stmt.getGeneratedKeys(); // return resultset containig autogenerated values fro primary key
													// auto increment
			stmt2.setInt(1, Integer.parseInt(map.get("applicationObjectId")));
			stmt2.setInt(2, Integer.parseInt(map.get("userId")));
			stmt2.setInt(3, rs.getInt(1));
			int res = stmt2.executeUpdate();
			rs.close();
			if (res == 0)
				return "Unsuccesfull";
			else
				return "Successfull";
		} catch (Exception e) {
			e.printStackTrace();
			return "Unsuccesfull due to " + e.getMessage(); 
		}
	}
	
	public String removeUserObjPrivilege(Map<String, String> map) 
	{
		String sql="Delete aoup,p from (ApplicationUserObjectPrivilege aoup Left Join ApplicationObject ao ON  aoup.ApplicationObjectId=ao.ApplicationObjectId) Left Join Privilege p ON aoup.PrivilegeId=p.PrivilegeId where ao.applicationId=? and ao.objectId=? and aoup.UserId=?";
		try {Connection conn = DatabaseConnection.getConnection();
				PreparedStatement stmt = conn.prepareStatement(sql); // getting auto generated key  for privilege table
		
			stmt.setInt(1,Integer.parseInt(map.get("applicationId")) );
			stmt.setInt(2,Integer.parseInt(map.get("objectId")) );
			stmt.setInt(1,Integer.parseInt(map.get("userId")) );
			int res=stmt.executeUpdate();
			if(res==1)return "Successfull";
			else return "Unsuccesfull";		
		}catch(Exception e) 
		{
			e.printStackTrace();
			return "Unsuccessfull due to"+e.getMessage();
		}
	}
	
	public String modifyUserObjectPrivilege(Map<String, String> map) 
	{
		String sql="Update ApplicationUserObjectPrivilege aoup Left Join ApplicationObject ao ON  aoup.ApplicationObjectId=ao.ApplicationObjectId Left Join Privilege p ON aoup.PrivilegeId=p.PrivilegeId SET p.views=?,p.edits=? where ao.applicationId=? and ao.applicationobjectId=? and aoup.UserId=?;";
		try {Connection conn = DatabaseConnection.getConnection();
				PreparedStatement stmt = conn.prepareStatement(sql); // getting auto generated key  for privilege table
		
			stmt.setBoolean(1,Boolean.parseBoolean(map.get("Views")) );
			stmt.setBoolean(2,Boolean.parseBoolean(map.get("Edits")) );
			stmt.setInt(3,Integer.parseInt(map.get("applicationId")) );
			stmt.setInt(4,Integer.parseInt(map.get("applicationObjectId")) );
			stmt.setInt(5,Integer.parseInt(map.get("userId")) );
			int res=stmt.executeUpdate();
			if(res==1)return "Successfull";
			else return "Unsuccesfull";		
		}catch(Exception e) 
		{
			e.printStackTrace();
			return "Unsuccessfull due to"+e.getMessage();
		}
	}
	
	public Privilege viewUserObjectPrivilege(Map<String, String> map) 
	{
		Privilege p=null;
		String sql="Select p.PrivilegeId,p.Views,p.Edits from ApplicationUserObjectPrivilege aoup Left Join ApplicationObject ao ON  aoup.ApplicationObjectId=ao.ApplicationObjectId Left Join Privilege p ON aoup.PrivilegeId=p.PrivilegeId where ao.applicationId=? and ao.applicationobjectId=? and aoup.UserId=?;";
		try {Connection conn = DatabaseConnection.getConnection();
				PreparedStatement stmt = conn.prepareStatement(sql); // getting auto generated key  for privilege table
		
			stmt.setInt(1,Integer.parseInt(map.get("applicationId")) );
			stmt.setInt(2,Integer.parseInt(map.get("applicationObjectId")) );
			stmt.setInt(3,Integer.parseInt(map.get("userId")) );
			ResultSet rs=stmt.executeQuery();
			if(!rs.isBeforeFirst()) 
			{
				System.out.println("no privileged for user object");
				p=null;
			}
			else 
			{
				if(rs.next()) 
				{
					p=new Privilege();
					p.setPrivilegeId(rs.getInt(1));
					p.setEdit(rs.getBoolean(2));
					p.setView(rs.getBoolean(3));
					return p;
				}
			}
			return p;
		}catch(Exception e) 
		{
			e.printStackTrace();
			return p;
		}
	}
}

// service
// request
