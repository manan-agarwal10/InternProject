package org.accolite.ACL.DAO;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import org.accolite.ACL.database.DatabaseConnection;
import org.accolite.ACL.model.Privilege;
import org.accolite.ACL.model.Role;

import com.mysql.jdbc.Statement;

public class ApplicationUserObjectPrivilegeDao {
	private final String SUCCESS = "Successfull";
	private final String FAIL = "UnSuccessfull";

	public String addUserObjPri(Map<String, String> map) {
		String sql = "Insert Into Privilege(Views,Edits) VALUES(?,?)";
		String sql2 = "INSERT INTO ApplicationUserObjectPrivilege(ApplicationObjectId,Userid,PrivilegeId) VALUES(?,?,?)";
		ResultSet rs = null;
		try (Connection conn = DatabaseConnection.getConnection();
				PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS); // getting auto
				PreparedStatement stmt2 = conn.prepareStatement(sql2);) {
			stmt.setBoolean(1, Boolean.parseBoolean(map.get("view")));
			stmt.setBoolean(2, Boolean.parseBoolean(map.get("edit")));
			stmt.executeUpdate();
			rs = stmt.getGeneratedKeys(); // return resultset containig autogenerated values for primary key auto
											// increment

			if (!rs.isBeforeFirst()) {
				return FAIL + "due to cant add privilege";
			} else {
				rs.next();
			}
			stmt2.setInt(1, Integer.parseInt(map.get("applicationObjectId")));
			stmt2.setInt(2, Integer.parseInt(map.get("userId")));
			stmt2.setInt(3, rs.getInt(1));
			stmt2.executeUpdate();
			return SUCCESS;
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL + "due to " + e.getMessage();
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}

	public String removeUserObjPrivilege(Map<String, String> map) {
		String sql = "Delete aoup,p from (ApplicationUserObjectPrivilege aoup Left Join ApplicationObject ao ON  aoup.ApplicationObjectId=ao.ApplicationObjectId) Left Join Privilege p ON aoup.PrivilegeId=p.PrivilegeId where ao.applicationId=? and ao.objectId=? and aoup.UserId=?";
		try (Connection conn = DatabaseConnection.getConnection(); 
				PreparedStatement stmt = conn.prepareStatement(sql); 
		) {
			stmt.setInt(1, Integer.parseInt(map.get("applicationId")));
			stmt.setInt(2, Integer.parseInt(map.get("objectId")));
			stmt.setInt(3, Integer.parseInt(map.get("userId")));
			int res = stmt.executeUpdate();
			if (res == 1)
				return SUCCESS;
			else
				return FAIL;
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL + "due to" + e.getMessage();
		}
	}

	public String modifyUserObjectPrivilege(Map<String, String> map) {
		String sql = "Update ApplicationUserObjectPrivilege aoup Left Join ApplicationObject ao ON  aoup.ApplicationObjectId=ao.ApplicationObjectId Left Join Privilege p ON aoup.PrivilegeId=p.PrivilegeId SET p.views=?,p.edits=? where ao.applicationId=? and ao.applicationobjectId=? and aoup.UserId=?;";
		try (Connection conn = DatabaseConnection.getConnection(); 
				PreparedStatement stmt = conn.prepareStatement(sql);) {
			stmt.setBoolean(1, Boolean.parseBoolean(map.get("view")));
			stmt.setBoolean(2, Boolean.parseBoolean(map.get("edit")));
			stmt.setInt(3, Integer.parseInt(map.get("applicationId")));
			stmt.setInt(4, Integer.parseInt(map.get("applicationObjectId")));
			stmt.setInt(5, Integer.parseInt(map.get("userId")));
			int res = stmt.executeUpdate();
			if (res == 1)
				return SUCCESS;
			else
				return FAIL;
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL + "due to" + e.getMessage();
		}
	}

	public Privilege viewUserObjectPrivilege(Map<String, String> map) {
		System.out.println("sss");
		Privilege p = new Privilege();
		ResultSet rs = null;
		String sql = "Select p.PrivilegeId,p.Views,p.Edits from ApplicationUserObjectPrivilege aoup Left Join ApplicationObject ao ON  aoup.ApplicationObjectId=ao.ApplicationObjectId Left Join Privilege p ON aoup.PrivilegeId=p.PrivilegeId where ao.applicationId=? and ao.applicationobjectId=? and aoup.UserId=?;";
		try (Connection conn = DatabaseConnection.getConnection(); 
				PreparedStatement stmt = conn.prepareStatement(sql);) {
			stmt.setInt(1, Integer.parseInt(map.get("applicationId")));
			stmt.setInt(2, Integer.parseInt(map.get("applicationObjectId")));
			stmt.setInt(3, Integer.parseInt(map.get("userId")));
			rs = stmt.executeQuery();
			if (!rs.isBeforeFirst()) {
				System.out.println("no privileged for user object");
			} else {
				if (rs.last()) {
					p.setPrivilegeId(rs.getInt(1));
					p.setView(rs.getBoolean(2));
					p.setEdit(rs.getBoolean(3));
				}
			}

			// checking for group
			// Checking its Group(Role) Privileges and taking union of permissions
			List<Role> rList = RoleUserDao.getRoleByUser(Integer.parseInt(map.get("userId")));
			for (Role r : rList) {
				Privilege temp = ApplicationRolePrivilegeDao
						.getRolePrivilegeByApplication(Integer.parseInt(map.get("applicationId")), r.getRoleId());
				p.setEdit(p.getEdit() || temp.getEdit());
				p.setView(p.getView() || temp.getView());
			}

			return p;
		} catch (Exception e) {
			e.printStackTrace();
			return p;
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}

		}
	}
}
